<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 height="100%" width="100%"
		 initialize="panel1_initializeHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.charts.series.ColumnSeries;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColorStroke;
			private var defaultColumnSeries:Array = [
				{yField: "Planned", displayName: "Planned display"},
				{yField: "Actual", displayName: "Actual display"},
				{yField: "Budget", displayName: "Budget display"},
			];
			private var defaultChartData:ArrayCollection = new ArrayCollection( [
				{ProjectName:"PK project", Budget: 100000000, Planned:80000000, Actual: 70000000},
				/*{ProjectName:"PK project", Budget: 100000000, Planned:80000000, Actual: 70000000}*/
			]);
			
			[Bindable]
			public function get chartData():ArrayCollection
			{
				if(_chartData != null)
					chart.width = _chartData.length * 200;
				return _chartData;
			}

			public function set chartData(value:ArrayCollection):void
			{
				_chartData = value;
			}

			[Bindable]
			public function get columnSeries():Array
			{
				return _columnSeries;
			}
			
			public function set columnSeries(data:Array):void
			{
				var newColumnSeries:ColumnSeries;
				var attr:String;
				var columnSeries:Object;
				_columnSeries = []
				for each(columnSeries in data) {
					if(columnSeries.hasOwnProperty("yField") && columnSeries.hasOwnProperty("displayName")) {
						newColumnSeries = new ColumnSeries();
						for each(attr in  ["yField", "displayName", "labelFunction", "labelPosition"]) {
							if(columnSeries!=null && columnSeries.hasOwnProperty(attr))
								newColumnSeries[attr] = columnSeries[attr];
						}
						_columnSeries.push(newColumnSeries);
					}
				}
			}
			
			[Bindable]
			private var categoryField:String;// = "ProjectName";
			private var _columnSeries:Array;
			[Bindable]
			private var columnSetType:String;
			private var _chartData:ArrayCollection;
			private var defaultProperties:Object = {
				columnSetType: "clustered"
			}

			public function load_data(categoryField:String, chartData:ArrayCollection, columnSeries:Array, option:Object=null):void {
				this.chartData = chartData;
				this.categoryField = categoryField;
				this.columnSeries = columnSeries;
				for each(var attr:String in ["columnSetType"]) {
					if( option != null && option.hasOwnProperty(attr) ) {
						this[attr] = option[attr];
					}
					else
						this[attr] = defaultProperties[attr];
				}
			}
			
			protected function panel1_initializeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				var s:SolidColorStroke = new SolidColorStroke(0x333333,1);
				hori.setStyle("axisStroke",s);
				vert.setStyle("axisStroke",s);
				// default data
				this.load_data("ProjectName", defaultChartData, defaultColumnSeries, null);
			}
			
		]]>
	</fx:Script>
	
	
	<s:layout>
		<s:HorizontalLayout padding="5"/>
	</s:layout>
	<s:Scroller height='100%' width='100%'>
		<s:Group id='group'>
			<mx:ColumnChart id="chart" color="0x323232"	showDataTips="true" dataProvider="{chartData}" height="180">
				
				<mx:horizontalAxis>
					<mx:CategoryAxis categoryField="{categoryField}" id="horizontalAxis"/>
				</mx:horizontalAxis>
				<mx:verticalAxis>
					<mx:LinearAxis id="vertizontalAxis"/>
				</mx:verticalAxis>
				
				<mx:verticalAxisRenderers>
					<mx:AxisRenderer id='vert' axis="{vertizontalAxis}">
					</mx:AxisRenderer>
				</mx:verticalAxisRenderers>
				
				<mx:horizontalAxisRenderers>
					<mx:AxisRenderer id='hori' axis="{horizontalAxis}">
						
					</mx:AxisRenderer>
				</mx:horizontalAxisRenderers>
				
				<mx:seriesFilters>
					<!--<s:DropShadowFilter distance="1" color="0x333333" alpha="1"/>-->
				</mx:seriesFilters>
				
				<mx:series>
					<mx:ColumnSet type="{columnSetType}" id="columnSet" series="{columnSeries}">
					</mx:ColumnSet>
					
				</mx:series>
			</mx:ColumnChart>
		</s:Group>
	</s:Scroller>
	<mx:Legend dataProvider="{chart}" color="0x323232"/>
</s:Panel>

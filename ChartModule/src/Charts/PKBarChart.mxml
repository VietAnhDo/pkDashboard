<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 height="100%" width="100%"
		 creationComplete="panel1_initializeHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.charts.ChartItem;
			import mx.charts.HitData;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.chartClasses.Series;
			import mx.charts.series.BarSeries;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColorStroke;
			[Bindable]
			private var defaultChartData:ArrayCollection = new ArrayCollection( [
				{Name: "Task 1", Planned: 0.8, Actual: 0.4},
				{Name: "Task 2", Planned: 0.7, Actual: 0.4},
				{Name: "Task 3", Planned: 0.6, Actual: 0.3},
				{Name: "Task 4", Planned: 0.5, Actual: 0.5},
				{Name: "Task 5", Planned: 0.1, Actual: 0.1},
				{Name: "Task 6", Planned: 0.4, Actual: 0.3},
				{Name: "Task 7", Planned: 0.9, Actual: 0.7}
			]);
			
			
			[Bindable]
			public function get barSeries():Array
			{
				return _barSeries;
			}
			
			public function set barSeries(data:Array):void
			{
				var newBarSeries:BarSeries;
				var attr:String;
				var barSeries:Object;
				_barSeries = []
				for each(barSeries in data) {
					if(barSeries.hasOwnProperty("xField") && barSeries.hasOwnProperty("displayName")) {
						newBarSeries = new BarSeries();
						for each(attr in  ["xField", "displayName", "labelFunction", "labelPosition"]) {
							if(barSeries.hasOwnProperty(attr))
								newBarSeries[attr] = barSeries[attr];
						}
						_barSeries.push(newBarSeries);
					}
				}
			}
			
			private function labelFunc1(element:ChartItem, series:Series):String {
				return (BarSeries(series).xField=="Planned" ? element.item.Planned : element.item.Actual ) * 100 + '%'; 
			}
			private function default_hori_label_func(labelValue:Object, previousValue:Object, axis:IAxis):String 
			{
				return Number(labelValue) * 100 + "%";
			}
			private function default_data_tip_func(hitData:HitData):String {
				var barSeries:BarSeries = BarSeries(hitData.element); 
				return "<b>"+barSeries.displayName+"</b><br>" + hitData.item.Name + "<br>" + hitData.item[barSeries.xField];
			}
			private var defaultBarSeries:Array = [
				{xField: "Planned", displayName: "PlannedDis"},
				{xField: "Actual", displayName: "ActualDis"},
			];
			[Bindable]
			private var horiLabelFunc:Function;
			[Bindable]
			private var chartData:ArrayCollection = defaultChartData;
			[Bindable]
			private var dataTipFunc:Function = default_data_tip_func;
			[Bindable]
			private var categoryField:String;
			[Bindable]
			private var barSetType:String;
			[Bindable]
			private var minimum:Number;
			[Bindable]
			private var maximum:Number;
			private var _barSeries:Array;
			private var defaultProperties:Object = {
				barSetType: "clustered",
				dataTipFunc: default_data_tip_func,
				barSeries: defaultBarSeries,
				mininum: -1,
				maximum: 1,
				horiLabelFunc: default_hori_label_func
			}
				
			protected function panel1_initializeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				var s:SolidColorStroke = new SolidColorStroke(0x333333,1);
				hori.setStyle("axisStroke",s);
				vert.setStyle("axisStroke",s);
				chart.height = defaultChartData.length / 4.0 * group.height;
				
				// default barSeries
				this.load_data("Name", defaultChartData, null);
			}
			
			/**
			 * @param categoryField Specifies the field of the data provider containing the text for the labels. If this property is null, CategoryAxis assumes that the dataProvider contains an array of Strings.
			 * @param chartData dataProvider Specifies the data provider for the chart. Data series rendered by the chart are assigned this data provider
			 * @param option extra attributes for chart
			 * <table>
			 * 		<tr><td> barSetType</td><td>"overlaid", "cluster", "stacked"</td></tr>
			 * 		<tr><td> dataTipFunc</td><td> <code>function (hitData:HitData):String<code></td></tr>
			 * 		<tr><td> barSeries</td><td><code>Object</code><br><code>{<br>
			 * 		[xField, displayName, labelFunction, labelPosition],<br>
			 * 		[xField, displayName, labelFunction, labelPosition],<br>...<br>}<br>labelFunction</code> like <code>function (element:ChartItem, series:Series)</code></td></tr>
			 * 		<tr><td> minimum</td><td>Number</td></tr>
			 * 		<tr><td> maximum</td><td>Number</td></tr>
			 * 		<tr><td> horiLabelFunc</td><td><code>function (labelValue:Object, previousValue:Object, axis:IAxis):String</code></td></tr>
			 * </table> 
			 */
			public function load_data(categoryField:String, chartData:ArrayCollection, option:Object):void {
				this.categoryField = categoryField;
				this.chartData = chartData;
				var attr:String;
				for each(attr in ["barSetType", "dataTipFunc", "barSeries", "minimum", "maximum", "horiLabelFunc"]) {
					if(option!=null && option.hasOwnProperty(attr)) {
						this[attr] = option[attr];
					}
					else
						this[attr] = defaultProperties[attr];
				}
			}
			
		]]>
	</fx:Script>
	
	
	<s:layout>
		<s:HorizontalLayout padding="5"/>
	</s:layout>
	<s:Scroller height='100%' width='100%'>
		<s:Group id='group'>
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<mx:BarChart id="chart" color="0x323232" showDataTips="true" dataProvider="{chartData}" dataTipFunction="{dataTipFunc}">
				
				<mx:seriesFilters>
					<!--<s:DropShadowFilter distance="1" color="0x333333" alpha="1"/>-->
				</mx:seriesFilters>
				
				<mx:verticalAxis>
					<mx:CategoryAxis categoryField="{categoryField}" id='verticalAxis' />
				</mx:verticalAxis>
				<mx:horizontalAxis>
					<mx:LinearAxis maximum="{maximum}" minimum="{minimum}" id='horizontalAxis'
								   labelFunction="{horiLabelFunc}"/>
				</mx:horizontalAxis>
				<mx:verticalAxisRenderers>
					<mx:AxisRenderer id='vert' axis="{verticalAxis}">
					</mx:AxisRenderer>
				</mx:verticalAxisRenderers>
				<mx:horizontalAxisRenderers>
					<mx:AxisRenderer id='hori' axis="{horizontalAxis}">
						
					</mx:AxisRenderer>
				</mx:horizontalAxisRenderers>
				<mx:series>
					<mx:BarSet type="{barSetType}" id="barSet" series="{barSeries}">
					</mx:BarSet>
				</mx:series>
			</mx:BarChart>
			<mx:Legend dataProvider="{chart}" color="0x323232" height="20"/>
		</s:Group>
	</s:Scroller>
</s:Panel>

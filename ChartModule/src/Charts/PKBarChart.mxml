<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 height="100%" width="100%"
		 creationComplete="panel1_initializeHandler(event)">
	<fx:Declarations>
		<s:NumberFormatter id="numForm" useGrouping="true" fractionalDigits="0"/>
		<mx:CategoryAxis id="a1" categoryField="Name"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.charts.ChartItem;
			import mx.charts.HitData;
			import mx.charts.chartClasses.Series;
			import mx.charts.series.BarSeries;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColorStroke;
			[Bindable]
			private var taskData:ArrayCollection = new ArrayCollection( [
				{Name: "Task 1", Planned: 0.8, Actual: 0.4},
				{Name: "Task 2", Planned: 0.7, Actual: 0.4},
				{Name: "Task 3", Planned: 0.6, Actual: 0.3},
				{Name: "Task 4", Planned: 0.5, Actual: 0.5},
				{Name: "Task 5", Planned: 0.1, Actual: 0.1},
				{Name: "Task 6", Planned: 0.4, Actual: 0.3},
				{Name: "Task 7", Planned: 0.9, Actual: 0.7}
			]);
			
			
			[Bindable]
			public function get barSeries():Array
			{
				return _barSeries;
			}
			
			public function set barSeries(data:Array):void
			{
				var newBarSeries:BarSeries;
				_barSeries = []
				for each(var barSeries:Object in data) {
					if(barSeries.hasOwnProperty("xField") && barSeries.hasOwnProperty("displayName")) {
						newBarSeries = new BarSeries();
						for(var attr:String in  barSeries) {
							if(newBarSeries.hasOwnProperty(attr))
								newBarSeries[attr] = barSeries[attr];
						}
						_barSeries.push(newBarSeries);
					}
				}
			}
			
			private function labelFunc1(element:ChartItem, series:Series):String {
				return (BarSeries(series).xField=="Planned" ? element.item.Planned : element.item.Actual ) * 100 + '%'; 
			}
			private function default_hori_label_func(cat:Object, pcat:Object, ax:LinearAxis):String 
			{
				return Number(cat) * 100 + "%";
			}
			private function default_data_tip_func(hitData:HitData):String {
				var barSeries:BarSeries = BarSeries(hitData.element); 
				return barSeries.xField=="Planned" ? "<b>"+barSeries.displayName+"</b><br>" + hitData.item.Name + "<br>" + hitData.item.Planned * 100 + "%"
					: "<b>"+barSeries.displayName+"</b><br>" + hitData.item.Name + "<br>" + hitData.item.Actual * 100 + "%";
			}
			
			protected function panel1_initializeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				var s:SolidColorStroke = new SolidColorStroke(0x0000FF,2);
				s.alpha = .5;
				hari.setStyle("axisStroke",s);
				vart.setStyle("axisStroke",s);
				bar.height = taskData.length / 4.0 * group.height;
				//				trace(bar.percentHeight);
				//				trace(group.percentHeight);
				//				trace(group.height);
				barSeries = [
					{xField: "Planned", displayName: "PlannedDis"},
					{xField: "Actual", displayName: "ActualDis"},
				];
				
			}
			private var hariLabelFunc:Function;
			[Bindable]
			public var barData:ArrayCollection = taskData;
			[Bindable]
			public var dataTipFunc:Function = default_data_tip_func;
			[Bindable]
			public var categoryField:String = "Name";
			[Bindable]
			public var barSetType:String = "clustered";
			private var _barSeries:Array;
			/*
			data: {
			barData:ArrayCollection     -> BarChart
			dataTipFunction:Function         -> BarChart
			categoryField:String             -> CategoryAxis
			barSetType:String                -> BarSet type
			barSeries:Array of Object: {
			[xField, displayName, labelFunction, labelPosition],
			[xField, displayName, labelFunction, labelPosition],
			...
			}
			}
			
			*/
			public function load_data(data:Object):void {
				for(var attr:String in data) {
					if(this.hasOwnProperty(attr)) {
						this[attr] = data[attr];
					}
				}
			}
			
		]]>
	</fx:Script>
	
	
	<s:layout>
		<s:HorizontalLayout padding="5"/>
	</s:layout>
	<s:Scroller height='100%' width='100%'>
		<s:Group id='group'>
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<mx:BarChart id="bar" color="0x323232" showDataTips="true" dataProvider="{barData}" dataTipFunction="{dataTipFunc}">
				
				<mx:seriesFilters>
					<!--<s:DropShadowFilter distance="1" color="0x333333" alpha="1"/>-->
				</mx:seriesFilters>
				
				<mx:verticalAxis>
					<mx:CategoryAxis categoryField="{categoryField}" id='verticalAxis' />
				</mx:verticalAxis>
				<mx:horizontalAxis>
					<mx:LinearAxis maximum="1" minimum="0" id='horizontalAxis'
								   labelFunction="{default_hori_label_func}"/>
				</mx:horizontalAxis>
				<mx:verticalAxisRenderers>
					<mx:AxisRenderer id='vart' axis="{verticalAxis}">
					</mx:AxisRenderer>
				</mx:verticalAxisRenderers>
				<mx:horizontalAxisRenderers>
					<mx:AxisRenderer id='hari' axis="{horizontalAxis}">
						
					</mx:AxisRenderer>
				</mx:horizontalAxisRenderers>
				<mx:series>
					<mx:BarSet type="{barSetType}" id="barSet" series="{barSeries}">
					</mx:BarSet>
				</mx:series>
			</mx:BarChart>
			<mx:Legend dataProvider="{bar}" color="0x323232" height="20"/>
		</s:Group>
	</s:Scroller>
</s:Panel>
